class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        int current_key_idx, required, required_key_idx,prev_key_idx;
        //defining a hashmap
        Map<Integer, Integer> hashMap= new HashMap<Integer, Integer>();
         
        int[] solution=new int[2];
        //converting nums array to hashmap
        for(int i = 0; i < nums.length; i++){
            
            if((hashMap.containsKey(nums[i])) && (2*nums[i]==target)){
                prev_key_idx = hashMap.get(nums[i]);
                solution[0]=prev_key_idx;
                solution[1]=i;
                return solution;
            }
            hashMap.put(nums[i],i);
        }
        
        //iterate hashmap to find sum of target
      for(int number:hashMap.keySet()){
            current_key_idx = hashMap.get(number);
            required = target - number;
 
            if(hashMap.containsValue(required)){
               required_key_idx = hashMap.get(required);
               solution[0]=required_key_idx;
               solution[1]=current_key_idx;
           
                 }
          
      }
        return solution;
    }
    
}
